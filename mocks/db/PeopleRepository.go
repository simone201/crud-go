// Code generated by mockery v2.13.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	model "HTTPChiSqlite/model"
)

// PeopleRepository is an autogenerated mock type for the PeopleRepository type
type PeopleRepository struct {
	mock.Mock
}

// DeletePerson provides a mock function with given fields: ctx, id
func (_m *PeopleRepository) DeletePerson(ctx context.Context, id int) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAllPeople provides a mock function with given fields:
func (_m *PeopleRepository) FindAllPeople() ([]model.Person, error) {
	ret := _m.Called()

	var r0 []model.Person
	if rf, ok := ret.Get(0).(func() []model.Person); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Person)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindPerson provides a mock function with given fields: id
func (_m *PeopleRepository) FindPerson(id int) (model.Person, error) {
	ret := _m.Called(id)

	var r0 model.Person
	if rf, ok := ret.Get(0).(func(int) model.Person); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(model.Person)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SavePerson provides a mock function with given fields: ctx, person
func (_m *PeopleRepository) SavePerson(ctx context.Context, person model.Person) (int64, error) {
	ret := _m.Called(ctx, person)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, model.Person) int64); ok {
		r0 = rf(ctx, person)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.Person) error); ok {
		r1 = rf(ctx, person)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePerson provides a mock function with given fields: ctx, id, patch
func (_m *PeopleRepository) UpdatePerson(ctx context.Context, id int, patch model.Person) (model.Person, error) {
	ret := _m.Called(ctx, id, patch)

	var r0 model.Person
	if rf, ok := ret.Get(0).(func(context.Context, int, model.Person) model.Person); ok {
		r0 = rf(ctx, id, patch)
	} else {
		r0 = ret.Get(0).(model.Person)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int, model.Person) error); ok {
		r1 = rf(ctx, id, patch)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewPeopleRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewPeopleRepository creates a new instance of PeopleRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPeopleRepository(t mockConstructorTestingTNewPeopleRepository) *PeopleRepository {
	mock := &PeopleRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
